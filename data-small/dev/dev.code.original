void markInternalClasses ( ) { for ( int i = mClassDefs . length - _NUM ; i >= _NUM ; i -- ) { mTypeIds [ mClassDefs [ i ] . classIdx ] . internal = _BOOL ; } for ( int i = _NUM ; i < mTypeIds . length ; i ++ ) { String className = mStrings [ mTypeIds [ i ] . descriptorIdx ] ; if ( className . length ( ) == _NUM ) { mTypeIds [ i ] . internal = _BOOL ; } else if ( className . charAt ( _NUM ) == STRING ) { mTypeIds [ i ] . internal = _BOOL ; } } }
void markInternalClasses ( ) { for ( int i = mClassDefs . length - _NUM ; i >= _NUM ; i -- ) { mTypeIds [ mClassDefs [ i ] . classIdx ] . internal = _BOOL ; } for ( int i = _NUM ; i < mTypeIds . length ; i ++ ) { String className = mStrings [ mTypeIds [ i ] . descriptorIdx ] ; if ( className . length ( ) == _NUM ) { mTypeIds [ i ] . internal = _BOOL ; } else if ( className . charAt ( _NUM ) == STRING ) { mTypeIds [ i ] . internal = _BOOL ; } } }
void markInternalClasses ( ) { for ( int i = mClassDefs . length - _NUM ; i >= _NUM ; i -- ) { mTypeIds [ mClassDefs [ i ] . classIdx ] . internal = _BOOL ; } for ( int i = _NUM ; i < mTypeIds . length ; i ++ ) { String className = mStrings [ mTypeIds [ i ] . descriptorIdx ] ; if ( className . length ( ) == _NUM ) { mTypeIds [ i ] . internal = _BOOL ; } else if ( className . charAt ( _NUM ) == STRING ) { mTypeIds [ i ] . internal = _BOOL ; } } }
public void addErrorListener ( final ErrorListener errorListener ) { if ( errorListeners == null ) { errorListeners = new ArrayList < ErrorListener > ( ) ; } errorListeners . add ( errorListener ) ; }
public void addHandler ( WarningHandler handler ) { _handlers . add ( handler ) ; }
public void addHandler ( WarningHandler handler ) { _handlers . add ( handler ) ; }
public void addHandler ( WarningHandler handler ) { _handlers . add ( handler ) ; }
public void addHandler ( WarningHandler handler ) { _handlers . add ( handler ) ; }
public void addHandler ( WarningHandler handler ) { _handlers . add ( handler ) ; }
public void addHandler ( WarningHandler handler ) { _handlers . add ( handler ) ; }
public void addHandler ( WarningHandler handler ) { _handlers . add ( handler ) ; }
public static int identifyRegions ( char [ ] [ ] img , char offChar ) { for ( int i = _NUM ; i < img . length ; i ++ ) { for ( int j = _NUM ; j < img [ _NUM ] . length ; j ++ ) { if ( img [ i ] [ j ] != offChar ) { img [ i ] [ j ] = ON ; } } } char next = FirstRegion ; IConvexHull alg = new ConvexHullScan ( ) ; while ( _BOOL ) { IPoint p = locate ( img ) ; if ( p == null ) return ( next - FirstRegion ) ; Collection < IPoint > points = new LinkedList < IPoint > ( ) ; points . add ( p ) ; spread ( img , ( int ) p . getX ( ) , ( int ) p . getY ( ) , points , next ) ; IPoint [ ] raw = points . toArray ( new TwoDPoint [ ] { } ) ; IPoint [ ] hull = alg . compute ( raw ) ; for ( IPoint h : hull ) { img [ ( int ) h . getX ( ) ] [ ( int ) h . getY ( ) ] = HULL ; } next ++ ; } }
public static int identifyRegions ( char [ ] [ ] img , char offChar ) { for ( int i = _NUM ; i < img . length ; i ++ ) { for ( int j = _NUM ; j < img [ _NUM ] . length ; j ++ ) { if ( img [ i ] [ j ] != offChar ) { img [ i ] [ j ] = ON ; } } } char next = FirstRegion ; IConvexHull alg = new ConvexHullScan ( ) ; while ( _BOOL ) { IPoint p = locate ( img ) ; if ( p == null ) return ( next - FirstRegion ) ; Collection < IPoint > points = new LinkedList < IPoint > ( ) ; points . add ( p ) ; spread ( img , ( int ) p . getX ( ) , ( int ) p . getY ( ) , points , next ) ; IPoint [ ] raw = points . toArray ( new TwoDPoint [ ] { } ) ; IPoint [ ] hull = alg . compute ( raw ) ; for ( IPoint h : hull ) { img [ ( int ) h . getX ( ) ] [ ( int ) h . getY ( ) ] = HULL ; } next ++ ; } }
public static int identifyRegions ( char [ ] [ ] img , char offChar ) { for ( int i = _NUM ; i < img . length ; i ++ ) { for ( int j = _NUM ; j < img [ _NUM ] . length ; j ++ ) { if ( img [ i ] [ j ] != offChar ) { img [ i ] [ j ] = ON ; } } } char next = FirstRegion ; IConvexHull alg = new ConvexHullScan ( ) ; while ( _BOOL ) { IPoint p = locate ( img ) ; if ( p == null ) return ( next - FirstRegion ) ; Collection < IPoint > points = new LinkedList < IPoint > ( ) ; points . add ( p ) ; spread ( img , ( int ) p . getX ( ) , ( int ) p . getY ( ) , points , next ) ; IPoint [ ] raw = points . toArray ( new TwoDPoint [ ] { } ) ; IPoint [ ] hull = alg . compute ( raw ) ; for ( IPoint h : hull ) { img [ ( int ) h . getX ( ) ] [ ( int ) h . getY ( ) ] = HULL ; } next ++ ; } }
public synchronized void copyFileData ( JDBCSequentialFile fileFrom , JDBCSequentialFile fileTo ) throws SQLException { try { connection . setAutoCommit ( _BOOL ) ; copyFileRecord . setInt ( _NUM , fileFrom . getId ( ) ) ; copyFileRecord . setInt ( _NUM , fileTo . getId ( ) ) ; copyFileRecord . executeUpdate ( ) ; connection . commit ( ) ; } catch ( SQLException e ) { connection . rollback ( ) ; throw e ; } }
public synchronized void copyFileData ( JDBCSequentialFile fileFrom , JDBCSequentialFile fileTo ) throws SQLException { try { connection . setAutoCommit ( _BOOL ) ; copyFileRecord . setInt ( _NUM , fileFrom . getId ( ) ) ; copyFileRecord . setInt ( _NUM , fileTo . getId ( ) ) ; copyFileRecord . executeUpdate ( ) ; connection . commit ( ) ; } catch ( SQLException e ) { connection . rollback ( ) ; throw e ; } }
private void init ( ) { setTitle ( STRING ) ; compPropertiesPanel = CompetitivePropertiesPanel . createCompetitivePropertiesPanel ( networkPanel , CompetitivePropsPanelType . CREATE_GROUP ) ; tabLogic . add ( compPropertiesPanel ) ; layoutPanel = new MainLayoutPanel ( _BOOL , this ) ; layoutPanel . setCurrentLayout ( CompetitiveGroup . DEFAULT_LAYOUT ) ; tabLayout . add ( layoutPanel ) ; tabbedPane . addTab ( STRING , tabLogic ) ; tabbedPane . addTab ( STRING , layoutPanel ) ; setContentPane ( tabbedPane ) ; Action helpAction = new ShowHelpAction ( compPropertiesPanel . getHelpPath ( ) ) ; addButton ( new JButton ( helpAction ) ) ; }
private void init ( ) { setTitle ( STRING ) ; compPropertiesPanel = CompetitivePropertiesPanel . createCompetitivePropertiesPanel ( networkPanel , CompetitivePropsPanelType . CREATE_GROUP ) ; tabLogic . add ( compPropertiesPanel ) ; layoutPanel = new MainLayoutPanel ( _BOOL , this ) ; layoutPanel . setCurrentLayout ( CompetitiveGroup . DEFAULT_LAYOUT ) ; tabLayout . add ( layoutPanel ) ; tabbedPane . addTab ( STRING , tabLogic ) ; tabbedPane . addTab ( STRING , layoutPanel ) ; setContentPane ( tabbedPane ) ; Action helpAction = new ShowHelpAction ( compPropertiesPanel . getHelpPath ( ) ) ; addButton ( new JButton ( helpAction ) ) ; }
private void init ( ) { setTitle ( STRING ) ; compPropertiesPanel = CompetitivePropertiesPanel . createCompetitivePropertiesPanel ( networkPanel , CompetitivePropsPanelType . CREATE_GROUP ) ; tabLogic . add ( compPropertiesPanel ) ; layoutPanel = new MainLayoutPanel ( _BOOL , this ) ; layoutPanel . setCurrentLayout ( CompetitiveGroup . DEFAULT_LAYOUT ) ; tabLayout . add ( layoutPanel ) ; tabbedPane . addTab ( STRING , tabLogic ) ; tabbedPane . addTab ( STRING , layoutPanel ) ; setContentPane ( tabbedPane ) ; Action helpAction = new ShowHelpAction ( compPropertiesPanel . getHelpPath ( ) ) ; addButton ( new JButton ( helpAction ) ) ; }
@ Nonnull private static NodeDisk findNodeDisk ( String diskId , List < NodeDisk > nodeDisks , String nodeName ) throws IOException { NodeDisk selected = null ; for ( NodeDisk nodeDisk : nodeDisks ) { if ( diskId . equals ( nodeDisk . getDiskRefId ( ) ) ) { selected = nodeDisk ; break ; } } if ( selected == null ) { String message = format ( STRING , nodeName , diskId ) ; throw new AbortException ( message ) ; } if ( selected . getNodeMountPoint ( ) == null ) { String message = format ( STRING , nodeName , diskId ) ; throw new AbortException ( message ) ; } return selected ; }