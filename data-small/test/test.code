protected abstract void on Success ( T result ) ;
public Cache Object load ( Object key , int x , int y , int zoom Level , Projection proj ) { if ( key instanceof String ) { String image Path = ( String ) key ; if ( verbose ) { logger . fine ( STRING + image Path ) ; } try { URL image URL = Prop Utils . get Resource Or File Or URL ( image Path ) ; if ( image URL != null ) { Buffered Image bi = Buffered Image Helper . get Buffered Image ( image URL ) ; OM Graphic raster = create OM Graphic From Buffered Image ( bi , x , y , zoom Level , proj ) ; if ( raster != null ) { return new Cache Object ( image Path , raster ) ; } } else { logger . fine ( STRING + image Path ) ; } } catch ( Malformed URL Exception e ) { logger . fine ( STRING + image Path ) ; } catch ( Interrupted Exception e ) { logger . fine ( STRING + image Path ) ; } catch ( Exception fnfe ) { logger . fine ( STRING + image Path ) ; } } return null ; }
public Cache Object load ( Object key , int x , int y , int zoom Level , Projection proj ) { if ( key instanceof String ) { String image Path = ( String ) key ; if ( verbose ) { logger . fine ( STRING + image Path ) ; } try { URL image URL = Prop Utils . get Resource Or File Or URL ( image Path ) ; if ( image URL != null ) { Buffered Image bi = Buffered Image Helper . get Buffered Image ( image URL ) ; OM Graphic raster = create OM Graphic From Buffered Image ( bi , x , y , zoom Level , proj ) ; if ( raster != null ) { return new Cache Object ( image Path , raster ) ; } } else { logger . fine ( STRING + image Path ) ; } } catch ( Malformed URL Exception e ) { logger . fine ( STRING + image Path ) ; } catch ( Interrupted Exception e ) { logger . fine ( STRING + image Path ) ; } catch ( Exception fnfe ) { logger . fine ( STRING + image Path ) ; } } return null ; }
public Cache Object load ( Object key , int x , int y , int zoom Level , Projection proj ) { if ( key instanceof String ) { String image Path = ( String ) key ; if ( verbose ) { logger . fine ( STRING + image Path ) ; } try { URL image URL = Prop Utils . get Resource Or File Or URL ( image Path ) ; if ( image URL != null ) { Buffered Image bi = Buffered Image Helper . get Buffered Image ( image URL ) ; OM Graphic raster = create OM Graphic From Buffered Image ( bi , x , y , zoom Level , proj ) ; if ( raster != null ) { return new Cache Object ( image Path , raster ) ; } } else { logger . fine ( STRING + image Path ) ; } } catch ( Malformed URL Exception e ) { logger . fine ( STRING + image Path ) ; } catch ( Interrupted Exception e ) { logger . fine ( STRING + image Path ) ; } catch ( Exception fnfe ) { logger . fine ( STRING + image Path ) ; } } return null ; }
public Cache Object load ( Object key , int x , int y , int zoom Level , Projection proj ) { if ( key instanceof String ) { String image Path = ( String ) key ; if ( verbose ) { logger . fine ( STRING + image Path ) ; } try { URL image URL = Prop Utils . get Resource Or File Or URL ( image Path ) ; if ( image URL != null ) { Buffered Image bi = Buffered Image Helper . get Buffered Image ( image URL ) ; OM Graphic raster = create OM Graphic From Buffered Image ( bi , x , y , zoom Level , proj ) ; if ( raster != null ) { return new Cache Object ( image Path , raster ) ; } } else { logger . fine ( STRING + image Path ) ; } } catch ( Malformed URL Exception e ) { logger . fine ( STRING + image Path ) ; } catch ( Interrupted Exception e ) { logger . fine ( STRING + image Path ) ; } catch ( Exception fnfe ) { logger . fine ( STRING + image Path ) ; } } return null ; }
public void add Page Streaming Descriptor Imports ( Model Type Table type Table ) { }
private boolean part Of URL ( int index ) { if ( in URL != null ) return in URL [ index ] ; in URL = new boolean [ text . length ( ) ] ; Matcher m = pUR Ls . matcher ( text ) ; while ( m . find ( ) ) for ( int i = m . start ( ) ; i < m . end ( ) ; ++ i ) in URL [ i ] = BOOL ; return in URL [ index ] ; }
private boolean part Of URL ( int index ) { if ( in URL != null ) return in URL [ index ] ; in URL = new boolean [ text . length ( ) ] ; Matcher m = pUR Ls . matcher ( text ) ; while ( m . find ( ) ) for ( int i = m . start ( ) ; i < m . end ( ) ; ++ i ) in URL [ i ] = BOOL ; return in URL [ index ] ; }
private boolean part Of URL ( int index ) { if ( in URL != null ) return in URL [ index ] ; in URL = new boolean [ text . length ( ) ] ; Matcher m = pUR Ls . matcher ( text ) ; while ( m . find ( ) ) for ( int i = m . start ( ) ; i < m . end ( ) ; ++ i ) in URL [ i ] = BOOL ; return in URL [ index ] ; }
private boolean part Of URL ( int index ) { if ( in URL != null ) return in URL [ index ] ; in URL = new boolean [ text . length ( ) ] ; Matcher m = pUR Ls . matcher ( text ) ; while ( m . find ( ) ) for ( int i = m . start ( ) ; i < m . end ( ) ; ++ i ) in URL [ i ] = BOOL ; return in URL [ index ] ; }
private boolean part Of URL ( int index ) { if ( in URL != null ) return in URL [ index ] ; in URL = new boolean [ text . length ( ) ] ; Matcher m = pUR Ls . matcher ( text ) ; while ( m . find ( ) ) for ( int i = m . start ( ) ; i < m . end ( ) ; ++ i ) in URL [ i ] = BOOL ; return in URL [ index ] ; }
public void add Swipe Listener ( Swipe Listener listener ) { if ( m Listeners == null ) { m Listeners = new Array List < > ( ) ; } m Listeners . add ( listener ) ; }
public void add Swipe Listener ( Swipe Listener listener ) { if ( m Listeners == null ) { m Listeners = new Array List < > ( ) ; } m Listeners . add ( listener ) ; }
public int index Of ( final Artist a ) { synchronized ( m Artists ) { return m Artists . index Of ( a ) ; } }
private void handle Json Create Quotation ( Request And Response request And Response ) throws IO Exception , Servlet Exception { request And Response . set Response Content Type Json ( ) ; String url ; String title ; String quotation ; String note ; String session Id ; try { final Json Node Helper json = get Json Node ( request And Response ) ; url = json . get String ( Db Logic . Constants . url ) ; title = json . get String ( Db Logic . Constants . title ) ; quotation = json . get String ( Db Logic . Constants . quotation ) ; note = json . get String ( Db Logic . Constants . note ) ; session Id = json . get String ( STRING ) ; } catch ( final IO Exception e ) { return Json 400 ( request And Response , servlet Text . error Json ( ) ) ; return ; } if ( ! Entry Attribute Validator . is Note Valid ( note ) ) { return Json 400 ( request And Response , servlet Text . error Note Is Invalid ( ) ) ; return ; } if ( ! Entry Attribute Validator . is Quotation Valid ( quotation ) ) { return Json 400 ( request And Response , servlet Text . error Quotation Is Invalid ( ) ) ; return ; } if ( ! Entry Attribute Validator . is Url Valid ( url ) ) { return Json 400 ( request And Response , servlet Text . error Url Is Invalid ( ) ) ; return ; } if ( ! Entry Attribute Validator . is Source Title Valid ( title ) ) { return Json 400 ( request And Response , servlet Text . error Title Is Invalid ( ) ) ; return ; } final Errors errors = new Errors ( ) ; try { final Long time = new Long ( System . current Time Millis ( ) ) ; String user Id = null ; if ( session Manager != null ) { final Http Session session = session Manager . get Session ( session Id ) ; if ( session != null && session . get Attribute ( session User Id Attribute ) != null ) { user Id = ( String ) session . get Attribute ( session User Id Attribute ) ; } } final User user = db Logic . get User By Id ( user Id ) ; if ( user == null ) { return Json 400 ( request And Response , servlet Text . error No Account Found ( ) ) ; return ; } if ( user . get Is Account Closed ( ) ) { return Json 400 ( request And Response , servlet Text . error Account Is Closed ( ) ) ; return ; } final Entry source = db Logic . update Or Create Source ( user , null , url , title , time , time , is User An Admin ( request And Response ) , errors ) ; if ( source == null ) { return Json 400 ( request And Response , errors ) ; return ; } final Entry entry = db Logic . create Entry Quotation ( user , source , quotation , note , time , is User An Admin ( request And Response ) , errors ) ; if ( entry == null ) { return Json 400 ( request And Response , errors ) ; return ; } request And Response . print ( STRING + STRING + entry . get Id ( ) + STRING + STRING + source . get Id ( ) + STRING ) ; db Logic . commit ( ) ; } catch ( final Persistence Exception e ) { logger . log ( Level . INFO , STRING , e ) ; return Json 500 ( request And Response , servlet Text . error Internal Database ( ) ) ; } }
private void handle Json Create Quotation ( Request And Response request And Response ) throws IO Exception , Servlet Exception { request And Response . set Response Content Type Json ( ) ; String url ; String title ; String quotation ; String note ; String session Id ; try { final Json Node Helper json = get Json Node ( request And Response ) ; url = json . get String ( Db Logic . Constants . url ) ; title = json . get String ( Db Logic . Constants . title ) ; quotation = json . get String ( Db Logic . Constants . quotation ) ; note = json . get String ( Db Logic . Constants . note ) ; session Id = json . get String ( STRING ) ; } catch ( final IO Exception e ) { return Json 400 ( request And Response , servlet Text . error Json ( ) ) ; return ; } if ( ! Entry Attribute Validator . is Note Valid ( note ) ) { return Json 400 ( request And Response , servlet Text . error Note Is Invalid ( ) ) ; return ; } if ( ! Entry Attribute Validator . is Quotation Valid ( quotation ) ) { return Json 400 ( request And Response , servlet Text . error Quotation Is Invalid ( ) ) ; return ; } if ( ! Entry Attribute Validator . is Url Valid ( url ) ) { return Json 400 ( request And Response , servlet Text . error Url Is Invalid ( ) ) ; return ; } if ( ! Entry Attribute Validator . is Source Title Valid ( title ) ) { return Json 400 ( request And Response , servlet Text . error Title Is Invalid ( ) ) ; return ; } final Errors errors = new Errors ( ) ; try { final Long time = new Long ( System . current Time Millis ( ) ) ; String user Id = null ; if ( session Manager != null ) { final Http Session session = session Manager . get Session ( session Id ) ; if ( session != null && session . get Attribute ( session User Id Attribute ) != null ) { user Id = ( String ) session . get Attribute ( session User Id Attribute ) ; } } final User user = db Logic . get User By Id ( user Id ) ; if ( user == null ) { return Json 400 ( request And Response , servlet Text . error No Account Found ( ) ) ; return ; } if ( user . get Is Account Closed ( ) ) { return Json 400 ( request And Response , servlet Text . error Account Is Closed ( ) ) ; return ; } final Entry source = db Logic . update Or Create Source ( user , null , url , title , time , time , is User An Admin ( request And Response ) , errors ) ; if ( source == null ) { return Json 400 ( request And Response , errors ) ; return ; } final Entry entry = db Logic . create Entry Quotation ( user , source , quotation , note , time , is User An Admin ( request And Response ) , errors ) ; if ( entry == null ) { return Json 400 ( request And Response , errors ) ; return ; } request And Response . print ( STRING + STRING + entry . get Id ( ) + STRING + STRING + source . get Id ( ) + STRING ) ; db Logic . commit ( ) ; } catch ( final Persistence Exception e ) { logger . log ( Level . INFO , STRING , e ) ; return Json 500 ( request And Response , servlet Text . error Internal Database ( ) ) ; } }
private synchronized void remove Loader ( Class Loader loader ) { int i ; for ( i = loaders . size ( ) - NUM ; i >= NUM ; i -- ) { Weak Reference < Class Loader > ref = loaders . get ( i ) ; Class Loader ref Loader = ref . get ( ) ; if ( ref Loader == null ) loaders . remove ( i ) ; else if ( ref Loader == loader ) loaders . remove ( i ) ; } }
public void return Value ( ) { mv . visit Insn ( return Type . get Opcode ( Opcodes . IRETURN ) ) ; }
public void test park Until 1 ( ) throws Exception { Cyclic Barrier barrier = new Cyclic Barrier ( NUM ) ; Parker parker = new Parker ( barrier , BOOL , NUM ) ; Thread parker Thread = new Thread ( parker ) ; Thread waiter Thread = new Thread ( new Wait And Unpark ( barrier , NUM , parker Thread ) ) ; parker Thread . start ( ) ; waiter Thread . start ( ) ; parker . assert Duration Is In Range ( NUM ) ; waiter Thread . join ( ) ; parker Thread . join ( ) ; }
public void test park Until 1 ( ) throws Exception { Cyclic Barrier barrier = new Cyclic Barrier ( NUM ) ; Parker parker = new Parker ( barrier , BOOL , NUM ) ; Thread parker Thread = new Thread ( parker ) ; Thread waiter Thread = new Thread ( new Wait And Unpark ( barrier , NUM , parker Thread ) ) ; parker Thread . start ( ) ; waiter Thread . start ( ) ; parker . assert Duration Is In Range ( NUM ) ; waiter Thread . join ( ) ; parker Thread . join ( ) ; }