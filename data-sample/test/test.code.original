public static LinuxDesktop detectDesktopSession ( ) { ArrayList < String > command = new ArrayList < String > ( ) ; command . add ( STRING ) ; command . add ( STRING ) ; command . add ( STRING ) ; Map < String , Object > desktops = new HashMap < String , Object > ( ) ; desktops . put ( STRING , LinuxDesktop . desktopKde ) ; desktops . put ( STRING , LinuxDesktop . desktopGnome ) ; desktops . put ( STRING , LinuxDesktop . desktopCinnamon ) ; desktops . put ( STRING , LinuxDesktop . desktopXfce ) ; Object desktop = Utils . isExpectedCommandOutput ( command , desktops ) ; if ( desktop != null ) { return ( LinuxDesktop ) desktop ; } return LinuxDesktop . desktopUnknown ; }
public static LinuxDesktop detectDesktopSession ( ) { ArrayList < String > command = new ArrayList < String > ( ) ; command . add ( STRING ) ; command . add ( STRING ) ; command . add ( STRING ) ; Map < String , Object > desktops = new HashMap < String , Object > ( ) ; desktops . put ( STRING , LinuxDesktop . desktopKde ) ; desktops . put ( STRING , LinuxDesktop . desktopGnome ) ; desktops . put ( STRING , LinuxDesktop . desktopCinnamon ) ; desktops . put ( STRING , LinuxDesktop . desktopXfce ) ; Object desktop = Utils . isExpectedCommandOutput ( command , desktops ) ; if ( desktop != null ) { return ( LinuxDesktop ) desktop ; } return LinuxDesktop . desktopUnknown ; }
public void removed ( java . awt . Container cont ) { }
public void removed ( java . awt . Container cont ) { }
public void removed ( java . awt . Container cont ) { }
public Builder deleteUserType ( ) { deleteFields . add ( STRING ) ; return this ; }
public static boolean registerTransform ( final String transformURI ) { final boolean added = transforms . add ( transformURI ) ; return added ; }
void incrementSchema ( String schemaName ) { if ( schemaName != null ) { Integer count = dbMap . get ( schemaName ) ; if ( count == null ) dbMap . put ( schemaName , _NUM ) ; else dbMap . put ( schemaName , count . intValue ( ) + _NUM ) ; } lastDb = schemaName ; }
static void createPolicyTree ( String configName , String configId , ServiceConfigManager scm , String org ) throws NoPermissionException , PolicyException , SSOException { try { ServiceConfig pConfig = scm . getOrganizationConfig ( org , null ) ; if ( pConfig == null ) { scm . createOrganizationConfig ( org , null ) ; pConfig = scm . getOrganizationConfig ( org , null ) ; } pConfig . addSubConfig ( configName , configId , _NUM , null ) ; } catch ( ServiceAlreadyExistsException se ) { if ( debug . messageEnabled ( ) ) { debug . message ( STRING + configName + STRING + configId + STRING + org ) ; } } catch ( SMSException e ) { String [ ] objs = { org } ; if ( e . getExceptionCode ( ) == SMSException . STATUS_NO_PERMISSION ) { throw ( new NoPermissionException ( ResBundleUtils . rbName , STRING , null ) ) ; } else { throw ( new PolicyException ( ResBundleUtils . rbName , STRING , objs , e ) ) ; } } }
NativeObject ( long address ) { this . allocationAddress = address ; this . address = address ; }
NativeObject ( long address ) { this . allocationAddress = address ; this . address = address ; }
NativeObject ( long address ) { this . allocationAddress = address ; this . address = address ; }
void updateVisibilityModel ( ) { Component c = getContainer ( ) ; if ( c instanceof JTextField ) { JTextField field = ( JTextField ) c ; BoundedRangeModel vis = field . getHorizontalVisibility ( ) ; int hspan = ( int ) getPreferredSpan ( X_AXIS ) ; int extent = vis . getExtent ( ) ; int maximum = Math . max ( hspan , extent ) ; extent = ( extent == _NUM ) ? maximum : extent ; int value = maximum - extent ; int oldValue = vis . getValue ( ) ; if ( ( oldValue + extent ) > maximum ) { oldValue = maximum - extent ; } value = Math . max ( _NUM , Math . min ( value , oldValue ) ) ; vis . setRangeProperties ( value , extent , _NUM , maximum , _BOOL ) ; } }
void updateVisibilityModel ( ) { Component c = getContainer ( ) ; if ( c instanceof JTextField ) { JTextField field = ( JTextField ) c ; BoundedRangeModel vis = field . getHorizontalVisibility ( ) ; int hspan = ( int ) getPreferredSpan ( X_AXIS ) ; int extent = vis . getExtent ( ) ; int maximum = Math . max ( hspan , extent ) ; extent = ( extent == _NUM ) ? maximum : extent ; int value = maximum - extent ; int oldValue = vis . getValue ( ) ; if ( ( oldValue + extent ) > maximum ) { oldValue = maximum - extent ; } value = Math . max ( _NUM , Math . min ( value , oldValue ) ) ; vis . setRangeProperties ( value , extent , _NUM , maximum , _BOOL ) ; } }
void updateVisibilityModel ( ) { Component c = getContainer ( ) ; if ( c instanceof JTextField ) { JTextField field = ( JTextField ) c ; BoundedRangeModel vis = field . getHorizontalVisibility ( ) ; int hspan = ( int ) getPreferredSpan ( X_AXIS ) ; int extent = vis . getExtent ( ) ; int maximum = Math . max ( hspan , extent ) ; extent = ( extent == _NUM ) ? maximum : extent ; int value = maximum - extent ; int oldValue = vis . getValue ( ) ; if ( ( oldValue + extent ) > maximum ) { oldValue = maximum - extent ; } value = Math . max ( _NUM , Math . min ( value , oldValue ) ) ; vis . setRangeProperties ( value , extent , _NUM , maximum , _BOOL ) ; } }
void updateVisibilityModel ( ) { Component c = getContainer ( ) ; if ( c instanceof JTextField ) { JTextField field = ( JTextField ) c ; BoundedRangeModel vis = field . getHorizontalVisibility ( ) ; int hspan = ( int ) getPreferredSpan ( X_AXIS ) ; int extent = vis . getExtent ( ) ; int maximum = Math . max ( hspan , extent ) ; extent = ( extent == _NUM ) ? maximum : extent ; int value = maximum - extent ; int oldValue = vis . getValue ( ) ; if ( ( oldValue + extent ) > maximum ) { oldValue = maximum - extent ; } value = Math . max ( _NUM , Math . min ( value , oldValue ) ) ; vis . setRangeProperties ( value , extent , _NUM , maximum , _BOOL ) ; } }
void updateVisibilityModel ( ) { Component c = getContainer ( ) ; if ( c instanceof JTextField ) { JTextField field = ( JTextField ) c ; BoundedRangeModel vis = field . getHorizontalVisibility ( ) ; int hspan = ( int ) getPreferredSpan ( X_AXIS ) ; int extent = vis . getExtent ( ) ; int maximum = Math . max ( hspan , extent ) ; extent = ( extent == _NUM ) ? maximum : extent ; int value = maximum - extent ; int oldValue = vis . getValue ( ) ; if ( ( oldValue + extent ) > maximum ) { oldValue = maximum - extent ; } value = Math . max ( _NUM , Math . min ( value , oldValue ) ) ; vis . setRangeProperties ( value , extent , _NUM , maximum , _BOOL ) ; } }
void updateVisibilityModel ( ) { Component c = getContainer ( ) ; if ( c instanceof JTextField ) { JTextField field = ( JTextField ) c ; BoundedRangeModel vis = field . getHorizontalVisibility ( ) ; int hspan = ( int ) getPreferredSpan ( X_AXIS ) ; int extent = vis . getExtent ( ) ; int maximum = Math . max ( hspan , extent ) ; extent = ( extent == _NUM ) ? maximum : extent ; int value = maximum - extent ; int oldValue = vis . getValue ( ) ; if ( ( oldValue + extent ) > maximum ) { oldValue = maximum - extent ; } value = Math . max ( _NUM , Math . min ( value , oldValue ) ) ; vis . setRangeProperties ( value , extent , _NUM , maximum , _BOOL ) ; } }
void updateVisibilityModel ( ) { Component c = getContainer ( ) ; if ( c instanceof JTextField ) { JTextField field = ( JTextField ) c ; BoundedRangeModel vis = field . getHorizontalVisibility ( ) ; int hspan = ( int ) getPreferredSpan ( X_AXIS ) ; int extent = vis . getExtent ( ) ; int maximum = Math . max ( hspan , extent ) ; extent = ( extent == _NUM ) ? maximum : extent ; int value = maximum - extent ; int oldValue = vis . getValue ( ) ; if ( ( oldValue + extent ) > maximum ) { oldValue = maximum - extent ; } value = Math . max ( _NUM , Math . min ( value , oldValue ) ) ; vis . setRangeProperties ( value , extent , _NUM , maximum , _BOOL ) ; } }
public static String createDescription ( final String description , final String [ ] causes , final String [ ] impacts ) { final StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( description ) ; stringBuilder . append ( STRING ) ; if ( causes . length != _NUM ) { stringBuilder . append ( STRING ) ; stringBuilder . append ( STRING + STRING ) ; for ( final String cause : causes ) { stringBuilder . append ( STRING ) ; stringBuilder . append ( cause ) ; stringBuilder . append ( STRING ) ; } } if ( impacts . length != _NUM ) { stringBuilder . append ( STRING ) ; stringBuilder . append ( STRING + STRING ) ; for ( final String impact : impacts ) { stringBuilder . append ( STRING ) ; stringBuilder . append ( impact ) ; stringBuilder . append ( STRING ) ; } } return stringBuilder . toString ( ) ; }