public void add ( double x , double y ) { data . add ( x ) ; data . add ( y ) ; minx = Math . min ( minx , x ) ; maxx = Math . max ( maxx , x ) ; miny = Math . min ( miny , y ) ; maxy = Math . max ( maxy , y ) ; }
public void handle Tbl Bootstrap Res Off Button Add Request ( Request Invocation Event event ) throws Model Control Exception { try { Map values = get Values ( ) ; on Before Save Profile ( values ) ; set Page Session Attribute ( PROPERTY ATTRIBUTE , ( Hash Map ) values ) ; SM Discovery Bootstrap Ref Off Add View Bean vb = ( SM Discovery Bootstrap Ref Off Add View Bean ) get View Bean ( SM Discovery Bootstrap Ref Off Add View Bean . class ) ; remove Page Session Attribute ( SM Discovery Bootstrap Ref Off Add View Bean . PROPERTY ATTRIBUTE ) ; unlock Page Trail ( ) ; pass Pg Session Map ( vb ) ; vb . forward To ( get Request Context ( ) ) ; } catch ( AM Console Exception e ) { set Inline Alert Message ( CC Alert . TYPE ERROR , STRING , e . get Message ( ) ) ; } }
public void handle Tbl Bootstrap Res Off Button Add Request ( Request Invocation Event event ) throws Model Control Exception { try { Map values = get Values ( ) ; on Before Save Profile ( values ) ; set Page Session Attribute ( PROPERTY ATTRIBUTE , ( Hash Map ) values ) ; SM Discovery Bootstrap Ref Off Add View Bean vb = ( SM Discovery Bootstrap Ref Off Add View Bean ) get View Bean ( SM Discovery Bootstrap Ref Off Add View Bean . class ) ; remove Page Session Attribute ( SM Discovery Bootstrap Ref Off Add View Bean . PROPERTY ATTRIBUTE ) ; unlock Page Trail ( ) ; pass Pg Session Map ( vb ) ; vb . forward To ( get Request Context ( ) ) ; } catch ( AM Console Exception e ) { set Inline Alert Message ( CC Alert . TYPE ERROR , STRING , e . get Message ( ) ) ; } }
public static double volume Union ( Spatial Comparable box 1 , Spatial Comparable box 2 ) { final int dim = assert Same Dimensionality ( box 1 , box 2 ) ; double volume = NUM ; for ( int i = NUM ; i < dim ; i ++ ) { final double min = Math . min ( box 1 . get Min ( i ) , box 2 . get Min ( i ) ) ; final double max = Math . max ( box 1 . get Max ( i ) , box 2 . get Max ( i ) ) ; volume *= ( max - min ) ; } return volume ; }
public void test Set Date int Date ( ) throws SQL Exception { Calendar cal = new Gregorian Calendar ( NUM , NUM , NUM ) ; Date [ ] dates = { new Date ( cal . get Time In Millis ( ) ) , new Date ( Integer . MAX VALUE ) , new Date ( NUM ) } ; Prepared Statement ps = null ; Prepared Statement ps 1 = null ; try { String query = STRING ; ps = conn . prepare Statement ( query ) ; for ( int i = NUM ; i < dates . length ; i ++ ) { ps . set Date ( NUM , dates [ i ] ) ; assert False ( ps . execute ( ) ) ; assert True ( ps . get Update Count ( ) > NUM ) ; } try { ps . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( Exception sqle ) { } ps . close ( ) ; try { ps . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( SQL Exception sqle ) { } String query 1 = STRING ; ps 1 = conn . prepare Statement ( query 1 ) ; try { ps 1 . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( SQL Exception sqle ) { assert Equals ( STRING , sqle . get Message ( ) ) ; } } finally { try { if ( ps != null ) ps . close ( ) ; if ( ps 1 != null ) ps 1 . close ( ) ; } catch ( SQL Exception ee ) { } } }
public void test Set Date int Date ( ) throws SQL Exception { Calendar cal = new Gregorian Calendar ( NUM , NUM , NUM ) ; Date [ ] dates = { new Date ( cal . get Time In Millis ( ) ) , new Date ( Integer . MAX VALUE ) , new Date ( NUM ) } ; Prepared Statement ps = null ; Prepared Statement ps 1 = null ; try { String query = STRING ; ps = conn . prepare Statement ( query ) ; for ( int i = NUM ; i < dates . length ; i ++ ) { ps . set Date ( NUM , dates [ i ] ) ; assert False ( ps . execute ( ) ) ; assert True ( ps . get Update Count ( ) > NUM ) ; } try { ps . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( Exception sqle ) { } ps . close ( ) ; try { ps . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( SQL Exception sqle ) { } String query 1 = STRING ; ps 1 = conn . prepare Statement ( query 1 ) ; try { ps 1 . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( SQL Exception sqle ) { assert Equals ( STRING , sqle . get Message ( ) ) ; } } finally { try { if ( ps != null ) ps . close ( ) ; if ( ps 1 != null ) ps 1 . close ( ) ; } catch ( SQL Exception ee ) { } } }
public void test Set Date int Date ( ) throws SQL Exception { Calendar cal = new Gregorian Calendar ( NUM , NUM , NUM ) ; Date [ ] dates = { new Date ( cal . get Time In Millis ( ) ) , new Date ( Integer . MAX VALUE ) , new Date ( NUM ) } ; Prepared Statement ps = null ; Prepared Statement ps 1 = null ; try { String query = STRING ; ps = conn . prepare Statement ( query ) ; for ( int i = NUM ; i < dates . length ; i ++ ) { ps . set Date ( NUM , dates [ i ] ) ; assert False ( ps . execute ( ) ) ; assert True ( ps . get Update Count ( ) > NUM ) ; } try { ps . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( Exception sqle ) { } ps . close ( ) ; try { ps . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( SQL Exception sqle ) { } String query 1 = STRING ; ps 1 = conn . prepare Statement ( query 1 ) ; try { ps 1 . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( SQL Exception sqle ) { assert Equals ( STRING , sqle . get Message ( ) ) ; } } finally { try { if ( ps != null ) ps . close ( ) ; if ( ps 1 != null ) ps 1 . close ( ) ; } catch ( SQL Exception ee ) { } } }
public void test Set Date int Date ( ) throws SQL Exception { Calendar cal = new Gregorian Calendar ( NUM , NUM , NUM ) ; Date [ ] dates = { new Date ( cal . get Time In Millis ( ) ) , new Date ( Integer . MAX VALUE ) , new Date ( NUM ) } ; Prepared Statement ps = null ; Prepared Statement ps 1 = null ; try { String query = STRING ; ps = conn . prepare Statement ( query ) ; for ( int i = NUM ; i < dates . length ; i ++ ) { ps . set Date ( NUM , dates [ i ] ) ; assert False ( ps . execute ( ) ) ; assert True ( ps . get Update Count ( ) > NUM ) ; } try { ps . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( Exception sqle ) { } ps . close ( ) ; try { ps . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( SQL Exception sqle ) { } String query 1 = STRING ; ps 1 = conn . prepare Statement ( query 1 ) ; try { ps 1 . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( SQL Exception sqle ) { assert Equals ( STRING , sqle . get Message ( ) ) ; } } finally { try { if ( ps != null ) ps . close ( ) ; if ( ps 1 != null ) ps 1 . close ( ) ; } catch ( SQL Exception ee ) { } } }
public void test Set Date int Date ( ) throws SQL Exception { Calendar cal = new Gregorian Calendar ( NUM , NUM , NUM ) ; Date [ ] dates = { new Date ( cal . get Time In Millis ( ) ) , new Date ( Integer . MAX VALUE ) , new Date ( NUM ) } ; Prepared Statement ps = null ; Prepared Statement ps 1 = null ; try { String query = STRING ; ps = conn . prepare Statement ( query ) ; for ( int i = NUM ; i < dates . length ; i ++ ) { ps . set Date ( NUM , dates [ i ] ) ; assert False ( ps . execute ( ) ) ; assert True ( ps . get Update Count ( ) > NUM ) ; } try { ps . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( Exception sqle ) { } ps . close ( ) ; try { ps . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( SQL Exception sqle ) { } String query 1 = STRING ; ps 1 = conn . prepare Statement ( query 1 ) ; try { ps 1 . set Date ( NUM , dates [ NUM ] ) ; fail ( STRING ) ; } catch ( SQL Exception sqle ) { assert Equals ( STRING , sqle . get Message ( ) ) ; } } finally { try { if ( ps != null ) ps . close ( ) ; if ( ps 1 != null ) ps 1 . close ( ) ; } catch ( SQL Exception ee ) { } } }
public boolean contains Baf Body ( ) { Iterator < Soot Method > method It = method Iterator ( ) ; while ( method It . has Next ( ) ) { Soot Method m = method It . next ( ) ; if ( m . has Active Body ( ) && m . get Active Body ( ) instanceof soot . baf . Baf Body ) { return BOOL ; } } return BOOL ; }
public boolean contains Baf Body ( ) { Iterator < Soot Method > method It = method Iterator ( ) ; while ( method It . has Next ( ) ) { Soot Method m = method It . next ( ) ; if ( m . has Active Body ( ) && m . get Active Body ( ) instanceof soot . baf . Baf Body ) { return BOOL ; } } return BOOL ; }
private Socket connect ( String host , String port String ) throws IO Exception { int port = NUM ; Socket sock = null ; boolean DEBUG = Debug . debugging ( STRING ) ; try { port = Integer . parse Int ( port String , NUM ) ; } catch ( Number Format Exception e ) { if ( DEBUG ) Debug . output ( STRING + host + STRING + port String ) ; throw new IO Exception ( STRING + port String ) ; } if ( DEBUG ) Debug . output ( STRING + host + STRING + port ) ; try { sock = new Socket ( host , port ) ; } catch ( IO Exception e ) { if ( sock != null ) sock . close ( ) ; if ( DEBUG ) { Debug . output ( STRING + host + STRING + port + STRING + e ) ; } throw e ; } return sock ; }
private Socket connect ( String host , String port String ) throws IO Exception { int port = NUM ; Socket sock = null ; boolean DEBUG = Debug . debugging ( STRING ) ; try { port = Integer . parse Int ( port String , NUM ) ; } catch ( Number Format Exception e ) { if ( DEBUG ) Debug . output ( STRING + host + STRING + port String ) ; throw new IO Exception ( STRING + port String ) ; } if ( DEBUG ) Debug . output ( STRING + host + STRING + port ) ; try { sock = new Socket ( host , port ) ; } catch ( IO Exception e ) { if ( sock != null ) sock . close ( ) ; if ( DEBUG ) { Debug . output ( STRING + host + STRING + port + STRING + e ) ; } throw e ; } return sock ; }
public void remove Cancel Listener ( Action Listener a ) { m cancel But . remove Action Listener ( a ) ; }
public void add Primer ( String module Filename , String extended Module Name ) { tla Buffer . append ( Resource Helper . get Extending Module Content ( module Filename , extended Module Name ) ) ; }
public void add Primer ( String module Filename , String extended Module Name ) { tla Buffer . append ( Resource Helper . get Extending Module Content ( module Filename , extended Module Name ) ) ; }
protected void validate State ( State current ) { Validation Utils . validate State ( current ) ; check Not Null ( current . execution State , STRING ) ; check Is Positive Number ( current . triggers Success , STRING ) ; check Is Positive Number ( current . triggers Error , STRING ) ; }
public static String find Edit Table ( String tables ) { if ( ! String Utils . is Empty ( tables ) ) { int spacepos = tables . index Of ( STRING ) ; int commapos = tables . index Of ( STRING ) ; if ( spacepos > NUM && ( spacepos < commapos || commapos < NUM ) ) { return tables . substring ( NUM , spacepos ) ; } else if ( commapos > NUM && ( commapos < spacepos || spacepos < NUM ) ) { return tables . substring ( NUM , commapos ) ; } return tables ; } else { throw new Illegal State Exception ( STRING ) ; } }
private void write Object ( java . io . Object Output Stream oos ) throws java . io . IO Exception { synchronized ( principals ) { oos . default Write Object ( ) ; } }
private void write Object ( java . io . Object Output Stream oos ) throws java . io . IO Exception { synchronized ( principals ) { oos . default Write Object ( ) ; } }