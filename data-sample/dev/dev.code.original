public void add ( double x , double y ) { data . add ( x ) ; data . add ( y ) ; minx = Math . min ( minx , x ) ; maxx = Math . max ( maxx , x ) ; miny = Math . min ( miny , y ) ; maxy = Math . max ( maxy , y ) ; }
public void handleTblBootstrapResOffButtonAddRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; setPageSessionAttribute ( PROPERTY_ATTRIBUTE , ( HashMap ) values ) ; SMDiscoveryBootstrapRefOffAddViewBean vb = ( SMDiscoveryBootstrapRefOffAddViewBean ) getViewBean ( SMDiscoveryBootstrapRefOffAddViewBean . class ) ; removePageSessionAttribute ( SMDiscoveryBootstrapRefOffAddViewBean . PROPERTY_ATTRIBUTE ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; vb . forwardTo ( getRequestContext ( ) ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , STRING , e . getMessage ( ) ) ; } }
public void handleTblBootstrapResOffButtonAddRequest ( RequestInvocationEvent event ) throws ModelControlException { try { Map values = getValues ( ) ; onBeforeSaveProfile ( values ) ; setPageSessionAttribute ( PROPERTY_ATTRIBUTE , ( HashMap ) values ) ; SMDiscoveryBootstrapRefOffAddViewBean vb = ( SMDiscoveryBootstrapRefOffAddViewBean ) getViewBean ( SMDiscoveryBootstrapRefOffAddViewBean . class ) ; removePageSessionAttribute ( SMDiscoveryBootstrapRefOffAddViewBean . PROPERTY_ATTRIBUTE ) ; unlockPageTrail ( ) ; passPgSessionMap ( vb ) ; vb . forwardTo ( getRequestContext ( ) ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , STRING , e . getMessage ( ) ) ; } }
public static double volumeUnion ( SpatialComparable box1 , SpatialComparable box2 ) { final int dim = assertSameDimensionality ( box1 , box2 ) ; double volume = _NUM ; for ( int i = _NUM ; i < dim ; i ++ ) { final double min = Math . min ( box1 . getMin ( i ) , box2 . getMin ( i ) ) ; final double max = Math . max ( box1 . getMax ( i ) , box2 . getMax ( i ) ) ; volume *= ( max - min ) ; } return volume ; }
public void testSetDate_int_Date ( ) throws SQLException { Calendar cal = new GregorianCalendar ( _NUM , _NUM , _NUM ) ; Date [ ] dates = { new Date ( cal . getTimeInMillis ( ) ) , new Date ( Integer . MAX_VALUE ) , new Date ( _NUM ) } ; PreparedStatement ps = null ; PreparedStatement ps1 = null ; try { String query = STRING ; ps = conn . prepareStatement ( query ) ; for ( int i = _NUM ; i < dates . length ; i ++ ) { ps . setDate ( _NUM , dates [ i ] ) ; assertFalse ( ps . execute ( ) ) ; assertTrue ( ps . getUpdateCount ( ) > _NUM ) ; } try { ps . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( Exception sqle ) { } ps . close ( ) ; try { ps . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( SQLException sqle ) { } String query1 = STRING ; ps1 = conn . prepareStatement ( query1 ) ; try { ps1 . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( SQLException sqle ) { assertEquals ( STRING , sqle . getMessage ( ) ) ; } } finally { try { if ( ps != null ) ps . close ( ) ; if ( ps1 != null ) ps1 . close ( ) ; } catch ( SQLException ee ) { } } }
public void testSetDate_int_Date ( ) throws SQLException { Calendar cal = new GregorianCalendar ( _NUM , _NUM , _NUM ) ; Date [ ] dates = { new Date ( cal . getTimeInMillis ( ) ) , new Date ( Integer . MAX_VALUE ) , new Date ( _NUM ) } ; PreparedStatement ps = null ; PreparedStatement ps1 = null ; try { String query = STRING ; ps = conn . prepareStatement ( query ) ; for ( int i = _NUM ; i < dates . length ; i ++ ) { ps . setDate ( _NUM , dates [ i ] ) ; assertFalse ( ps . execute ( ) ) ; assertTrue ( ps . getUpdateCount ( ) > _NUM ) ; } try { ps . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( Exception sqle ) { } ps . close ( ) ; try { ps . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( SQLException sqle ) { } String query1 = STRING ; ps1 = conn . prepareStatement ( query1 ) ; try { ps1 . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( SQLException sqle ) { assertEquals ( STRING , sqle . getMessage ( ) ) ; } } finally { try { if ( ps != null ) ps . close ( ) ; if ( ps1 != null ) ps1 . close ( ) ; } catch ( SQLException ee ) { } } }
public void testSetDate_int_Date ( ) throws SQLException { Calendar cal = new GregorianCalendar ( _NUM , _NUM , _NUM ) ; Date [ ] dates = { new Date ( cal . getTimeInMillis ( ) ) , new Date ( Integer . MAX_VALUE ) , new Date ( _NUM ) } ; PreparedStatement ps = null ; PreparedStatement ps1 = null ; try { String query = STRING ; ps = conn . prepareStatement ( query ) ; for ( int i = _NUM ; i < dates . length ; i ++ ) { ps . setDate ( _NUM , dates [ i ] ) ; assertFalse ( ps . execute ( ) ) ; assertTrue ( ps . getUpdateCount ( ) > _NUM ) ; } try { ps . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( Exception sqle ) { } ps . close ( ) ; try { ps . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( SQLException sqle ) { } String query1 = STRING ; ps1 = conn . prepareStatement ( query1 ) ; try { ps1 . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( SQLException sqle ) { assertEquals ( STRING , sqle . getMessage ( ) ) ; } } finally { try { if ( ps != null ) ps . close ( ) ; if ( ps1 != null ) ps1 . close ( ) ; } catch ( SQLException ee ) { } } }
public void testSetDate_int_Date ( ) throws SQLException { Calendar cal = new GregorianCalendar ( _NUM , _NUM , _NUM ) ; Date [ ] dates = { new Date ( cal . getTimeInMillis ( ) ) , new Date ( Integer . MAX_VALUE ) , new Date ( _NUM ) } ; PreparedStatement ps = null ; PreparedStatement ps1 = null ; try { String query = STRING ; ps = conn . prepareStatement ( query ) ; for ( int i = _NUM ; i < dates . length ; i ++ ) { ps . setDate ( _NUM , dates [ i ] ) ; assertFalse ( ps . execute ( ) ) ; assertTrue ( ps . getUpdateCount ( ) > _NUM ) ; } try { ps . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( Exception sqle ) { } ps . close ( ) ; try { ps . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( SQLException sqle ) { } String query1 = STRING ; ps1 = conn . prepareStatement ( query1 ) ; try { ps1 . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( SQLException sqle ) { assertEquals ( STRING , sqle . getMessage ( ) ) ; } } finally { try { if ( ps != null ) ps . close ( ) ; if ( ps1 != null ) ps1 . close ( ) ; } catch ( SQLException ee ) { } } }
public void testSetDate_int_Date ( ) throws SQLException { Calendar cal = new GregorianCalendar ( _NUM , _NUM , _NUM ) ; Date [ ] dates = { new Date ( cal . getTimeInMillis ( ) ) , new Date ( Integer . MAX_VALUE ) , new Date ( _NUM ) } ; PreparedStatement ps = null ; PreparedStatement ps1 = null ; try { String query = STRING ; ps = conn . prepareStatement ( query ) ; for ( int i = _NUM ; i < dates . length ; i ++ ) { ps . setDate ( _NUM , dates [ i ] ) ; assertFalse ( ps . execute ( ) ) ; assertTrue ( ps . getUpdateCount ( ) > _NUM ) ; } try { ps . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( Exception sqle ) { } ps . close ( ) ; try { ps . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( SQLException sqle ) { } String query1 = STRING ; ps1 = conn . prepareStatement ( query1 ) ; try { ps1 . setDate ( _NUM , dates [ _NUM ] ) ; fail ( STRING ) ; } catch ( SQLException sqle ) { assertEquals ( STRING , sqle . getMessage ( ) ) ; } } finally { try { if ( ps != null ) ps . close ( ) ; if ( ps1 != null ) ps1 . close ( ) ; } catch ( SQLException ee ) { } } }
public boolean containsBafBody ( ) { Iterator < SootMethod > methodIt = methodIterator ( ) ; while ( methodIt . hasNext ( ) ) { SootMethod m = methodIt . next ( ) ; if ( m . hasActiveBody ( ) && m . getActiveBody ( ) instanceof soot . baf . BafBody ) { return _BOOL ; } } return _BOOL ; }
public boolean containsBafBody ( ) { Iterator < SootMethod > methodIt = methodIterator ( ) ; while ( methodIt . hasNext ( ) ) { SootMethod m = methodIt . next ( ) ; if ( m . hasActiveBody ( ) && m . getActiveBody ( ) instanceof soot . baf . BafBody ) { return _BOOL ; } } return _BOOL ; }
private Socket connect ( String host , String portString ) throws IOException { int port = _NUM ; Socket sock = null ; boolean DEBUG = Debug . debugging ( STRING ) ; try { port = Integer . parseInt ( portString , _NUM ) ; } catch ( NumberFormatException e ) { if ( DEBUG ) Debug . output ( STRING + host + STRING + portString ) ; throw new IOException ( STRING + portString ) ; } if ( DEBUG ) Debug . output ( STRING + host + STRING + port ) ; try { sock = new Socket ( host , port ) ; } catch ( IOException e ) { if ( sock != null ) sock . close ( ) ; if ( DEBUG ) { Debug . output ( STRING + host + STRING + port + STRING + e ) ; } throw e ; } return sock ; }
private Socket connect ( String host , String portString ) throws IOException { int port = _NUM ; Socket sock = null ; boolean DEBUG = Debug . debugging ( STRING ) ; try { port = Integer . parseInt ( portString , _NUM ) ; } catch ( NumberFormatException e ) { if ( DEBUG ) Debug . output ( STRING + host + STRING + portString ) ; throw new IOException ( STRING + portString ) ; } if ( DEBUG ) Debug . output ( STRING + host + STRING + port ) ; try { sock = new Socket ( host , port ) ; } catch ( IOException e ) { if ( sock != null ) sock . close ( ) ; if ( DEBUG ) { Debug . output ( STRING + host + STRING + port + STRING + e ) ; } throw e ; } return sock ; }
public void removeCancelListener ( ActionListener a ) { m_cancelBut . removeActionListener ( a ) ; }
public void addPrimer ( String moduleFilename , String extendedModuleName ) { tlaBuffer . append ( ResourceHelper . getExtendingModuleContent ( moduleFilename , extendedModuleName ) ) ; }
public void addPrimer ( String moduleFilename , String extendedModuleName ) { tlaBuffer . append ( ResourceHelper . getExtendingModuleContent ( moduleFilename , extendedModuleName ) ) ; }
protected void validateState ( State current ) { ValidationUtils . validateState ( current ) ; checkNotNull ( current . executionState , STRING ) ; checkIsPositiveNumber ( current . triggersSuccess , STRING ) ; checkIsPositiveNumber ( current . triggersError , STRING ) ; }
public static String findEditTable ( String tables ) { if ( ! StringUtils . isEmpty ( tables ) ) { int spacepos = tables . indexOf ( STRING ) ; int commapos = tables . indexOf ( STRING ) ; if ( spacepos > _NUM && ( spacepos < commapos || commapos < _NUM ) ) { return tables . substring ( _NUM , spacepos ) ; } else if ( commapos > _NUM && ( commapos < spacepos || spacepos < _NUM ) ) { return tables . substring ( _NUM , commapos ) ; } return tables ; } else { throw new IllegalStateException ( STRING ) ; } }
private void writeObject ( java . io . ObjectOutputStream oos ) throws java . io . IOException { synchronized ( principals ) { oos . defaultWriteObject ( ) ; } }
private void writeObject ( java . io . ObjectOutputStream oos ) throws java . io . IOException { synchronized ( principals ) { oos . defaultWriteObject ( ) ; } }